<?xml version="1.0"?>

<document>
  <properties>
    <author email="jahlborn@users.sf.net">James Ahlborn</author>
    <title>Utilities for streaming data over RMI</title>
  </properties>
  <body>
    <section name="RMIIO">
      <p>
        RMIIO is a library which makes it as simple as possible to stream
        large amounts of data using the RMI framework (or any RPC framework
        for that matter, see the
        <a href="#RemoteStreamExporter">RemoteStreamExporter</a> section for
        details).
      </p>
      <p>
        The RMI framework makes it very easy to implement remote communication
        between java programs.  It takes what looks like a simple method call
        on the client side and manages all the intracacies of data marshalling
        and data transmission of the request to the server and the subsequent
        response back to the client.  The user need not trouble over the
        underlying transport method, protocol or many of the other myriad of
        issues encountered when implementing remote communication.
      </p>
      <p>
        However, the RMI framework is designed around sending and receiving
        groups of objects which are all immediately available in memory.  How
        do you send a file from the client to the server?  And, if you can do
        that, what happens when you want to send a 2GB file and you only have
        1GB of memory available?  The tools and APIs in the standard java
        runtime do not have any ready solutions to this problem, yet many
        people have encountered this problem.  Spend a few moments searching
        through Sun's java forums and you will find many questions and very
        few useful suggestions:
        <ul>
          <li>Send a File object</li>
          <li>Send a URL</li>
          <li>Send an InputStream</li>
          <li>Send an byte[]</li>
        </ul>
        The last is the first suggestion actually approaching usefulness--it
        solves the first problem but not the second (for more detailed
        rebuttals read the <a href="apidocs/com/healthmarketscience/rmiio/package-summary.html#package_description">package javadocs</a>).
      </p>
      <p>
        What you really want to do is stream data from the client to the
        server (you have an InputStream, right?) using a framework which does
        not really expose a streaming model.  The RMIIO library was written to
        fill in that missing gap in the RMI framework (as well as other RPC
        frameworks).  It provides some very powerful classes which enable a
        client to stream data to the server using only a few extra lines of
        code.
      </p>
      <subsection name="RemoteStreamExample">
        <p>
          How simple?  Well, how about some example code (note, examples omit
          normal exception handling for the sake of brevity).  The obvious
          example, of course, is a simple file upload service.  If the client
          and server were running in the same JVM, you would probably create a
          server implementation like this:
          <pre>
            // A simple local file upload service
            public class LocalFileUploadService {
              public void uploadFile(String fileName, InputStream fileData) {
                // ... copy fileData to local storage ...
              }
            }
          </pre>
          Easy, right?  Now, to actually turn this into a remote interface,
          the <code>fileData</code> type needs to be changed, as an
          InputStream will not work remotely.  Using RMIIO, this
          implementation becomes:
          <pre>
            // A simple remote file upload service
            public class RemoteFileUploadService {
              public void uploadFile(String fileName, RemoteInputStream remoteFileData) {
                InputStream fileData = RemoteInputStreamClient.wrap(remoteFileData);
                // ... copy fileData to local storage ...                
            }
          </pre>
          That's it, one extra line on the server to wrap the RMIIO
          RemoteInputStream as an InputStream (yes, it is confusing that the
          server uses a method with "client" in the name, but in this
          situation, the server is acting as the client with respect to the
          RemoteInputStream).  Fine, so the server changes are easy, how does
          the client create a RemoteInputStream?
          <pre>
            // a client call to a RemoteFileUploadService
            RemoteFileUploadService service = ...;
            InputStream fileData = ...;
            RemoteInputStreamServer remoteFileData = new SimpleRemoteInputStream(fileData);
            service.uploadFile("MyFile", remoteFileData.export());
          </pre>
          And there you have a working client which can stream a file to a
          remote server (again, note that the standard try/catch/finally
          blocks necessary in actual production code have been omitted from
          these examples).  By wrapping the InputStream using one of the RMIIO
          RemoteInputStreamServer implementations and exporting it, the
          source file data can be streamed to the server using an already
          established RMI connection.
        </p>
      </subsection>
      <subsection>
        <p>
          This example just touches on the powerful functionality provided by
          the RMIIO library.  See the <a href="#Features">Features</a> section
          below for more details.  The RMIIO library is licensed under the
          <a href="license.html">GNU Lesser General Public License</a>
          and is part of the <a href="http://openhms.sourceforge.net/">OpenHMS</a> project.
        </p>
      </subsection>
    </section>
    <section name="Getting Started">
      <p>
        <ul>
          <li>Extended code examples in the <a href="apidocs/com/healthmarketscience/rmiio/package-summary.html#package_description">rmiio package javadocs</a></li>
          <li>Working <a href="xref-test/examples/stream/package-summary.html">stream</a> and <a href="xref-test/examples/iterator/package-summary.html">iterator</a> examples</li>
          <li><a href="apidocs/com/healthmarketscience/rmiio/package-summary.html#Usage_Notes">Usage Notes</a></li>
          <li><a href="faq.html">FAQ</a></li>
          <li><a href="apidocs/index.html">Javadoc API documentation</a></li>
          <li><a href="xref/index.html">Complete source code (with cross references)</a></li>
        </ul>
      </p>
    </section>
    <section name="Features">
      <ul>
        <li>Remote <a href="apidocs/com/healthmarketscience/rmiio/RemoteInputStreamServer.html">input</a> and <a href="apidocs/com/healthmarketscience/rmiio/RemoteOutputStreamServer.html">output</a> streams</li>
        <li>Remote Iterator implementation for streaming collections of
        objects (<a href="apidocs/com/healthmarketscience/rmiio/SerialRemoteIteratorServer.html">SerialRemoteIteratorServer</a>)</li>
        <li>Optional GZIP compression over the wire (<a href="apidocs/com/healthmarketscience/rmiio/GZIPRemoteInputStream.html">input</a> and <a href="apidocs/com/healthmarketscience/rmiio/GZIPRemoteOutputStream.html">output</a> streams)</li>
        <li>Stream progress monitoring hooks
        (<a href="apidocs/com/healthmarketscience/rmiio/RemoteStreamMonitor.html">RemoteStreamMonitor</a>)</li>
        <li>Optional low-latency streaming (<a href="apidocs/com/healthmarketscience/rmiio/SerialRemoteIteratorServer.html#SerialRemoteIteratorServer(boolean,%20boolean,%20com.healthmarketscience.rmiio.IOIterator)">noDelay</a>)</li>
        <li>Serializable <a href="apidocs/com/healthmarketscience/rmiio/SerializableInputStream.html">InputStream</a> and <a href="apidocs/com/healthmarketscience/rmiio/SerializableOutputStream.html">OutputStream</a> wrappers for remote
        input and output streams</li>
        <li>Pluggable RPC integration which can be used to integrate with
        frameworks other than RMI (<a href="apidocs/com/healthmarketscience/rmiio/exporter/package-summary.html#package_description">exporter package</a>)</li>
        <li>Utilities to facilitate robust RMI usage (<a href="apidocs/com/healthmarketscience/rmiio/RemoteRetry.html">RemoteRetry</a>)</li>
      </ul>
    </section>
    <section name="RemoteStreamExporter">
      <p>
        As of RMIIO release 1.1.0, the streaming implementation classes have
        been abstracted from the RPC framework infrastructure.  The <a href="apidocs/com/healthmarketscience/rmiio/exporter/package-summary.html#package_description">exporter package</a> has been added to enable the remote

        stream implementations to be utilized within any RPC framework.  The
        RemoteStreamExporter class can be implemented to tie the remote
        stream implementations to whatever RPC mechanism is desired, the
        default being RMI.  There is some proof-of-concept code in the
        <code>src/corbaExample</code> directory showing CORBA being used as
        the RPC framework, including a c++ client written using <a href="http://omniorb.sourceforge.net/">omniORB</a> which consumes a

        remote stream from a java server.  Additionally, this should enable
        the remote streams to eventually be integrated into the <a href="http://labs.jboss.com/jbossremoting/">JBoss Remoting</a> framework.
      </p>
    </section>
  </body>
</document>
